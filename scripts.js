// Generated by CoffeeScript 1.6.3
(function() {
  var access_token, drawTreeMap, extractName, final, getDataForUrl, getHashParams, getURLParameter, setupTooltip;

  getURLParameter = function(name) {
    return decodeURI((RegExp(name + "=" + "(.+?)(&|$)").exec(location.search) || [null])[1]);
  };

  getHashParams = function() {
    var a, d, e, hashParams, q, r;
    hashParams = {};
    e = void 0;
    a = /\+/g;
    r = /([^&;=]+)=?([^&;]*)/g;
    d = function(s) {
      return decodeURIComponent(s.replace(a, " "));
    };
    q = window.location.hash.substring(1);
    while (e = r.exec(q)) {
      hashParams[d(e[1])] = d(e[2]);
    }
    return hashParams;
  };

  extractName = function(name) {
    return name.slice(name.lastIndexOf("/") + 1, name.length);
  };

  getDataForUrl = function(dict, urlAddon) {
    return $.ajax({
      type: "GET",
      url: "https://api.dropbox.com/1/metadata/dropbox" + urlAddon,
      headers: {
        "Authorization": "Bearer " + access_token
      }
    }).fail(function(data) {
      var children, cleaned_path, file, folder, new_dict, _i, _len, _ref, _results;
      folder = JSON.parse(data["responseText"]);
      dict['name'] = extractName(folder.path);
      children = [];
      dict['children'] = children;
      _ref = folder.contents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.is_dir) {
          cleaned_path = encodeURI(file.path);
          new_dict = {};
          getDataForUrl(new_dict, cleaned_path);
          _results.push(children.push(new_dict));
        } else {
          _results.push(children.push({
            'name': extractName(file.path),
            'size': file.bytes
          }));
        }
      }
      return _results;
    });
  };

  setupTooltip = function() {
    return $(document).tooltip({
      show: {
        effect: "appear",
        duration: 0
      },
      hide: {
        effect: "appear",
        duration: 0
      }
    });
  };

  drawTreeMap = function() {
    var change, color, div, height, margin, node, position, treemap, width;
    position = function() {
      return this.style("left", function(d) {
        return d.x + "px";
      }).style("top", function(d) {
        return d.y + "px";
      }).style("width", function(d) {
        return Math.max(0, d.dx - 1) + "px";
      }).style("height", function(d) {
        return Math.max(0, d.dy - 1) + "px";
      });
    };
    margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    width = window.innerWidth;
    height = window.innerHeight;
    color = d3.scale.category20c();
    treemap = d3.layout.treemap().size([width, height]).sticky(true).value(function(d) {
      return d.size;
    });
    div = d3.select("body").append("div").style("position", "relative").style("width", (width + margin.left + margin.right) + "px").style("height", (height + margin.top + margin.bottom) + "px").style("left", margin.left + "px").style("top", margin.top + "px");
    node = div.datum(final).selectAll(".node").data(treemap.nodes).enter().append("div").attr("class", "node").call(position).style("background", function(d) {
      if (d.children) {
        return color(d.name);
      } else {
        return null;
      }
    }).attr("title", function(d) {
      if (d.children) {
        return null;
      } else {
        return d.name;
      }
    });
    return d3.selectAll("input").on("change", change = function() {
      var value;
      value = (function() {
        switch (this.value) {
          case "count":
            return 1;
          case "size":
            return function(d) {
              return d.size;
            };
        }
      }).call(this);
      return node.data(treemap.value(value).nodes).transition().duration(1500).call(position);
    });
  };

  access_token = null;

  final = {};

  $(function() {
    var in_id, prev_final, state;
    $('form').hide();
    $('#loading').hide();
    access_token = getHashParams()['access_token'];
    if (!access_token) {
      state = "09asd82n20fh90ds0h0sna0";
      return $('#authentication a').attr('href', $('#authentication a').attr('href') + "&state=" + state);
    } else {
      $("#loading").show();
      $('#page1').hide();
      $('#pad').hide();
      setupTooltip();
      getDataForUrl(final, "/");
      prev_final = {};
      return in_id = setInterval((function() {
        if (JSON.stringify(prev_final) === JSON.stringify(final)) {
          $('#loading').hide();
          $('form').show();
          drawTreeMap();
          clearInterval(in_id);
        }
        return prev_final = jQuery.extend(true, {}, final);
      }), 1000);
    }
  });

}).call(this);
