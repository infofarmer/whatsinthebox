// Generated by CoffeeScript 1.6.3
(function() {
  var MIN_BYTES, access_token, createDivs, depth, div, drawTreeMap, extractName, final, formatSizeUnits, getCSRF, getDataForUrl, getFreeSpace, getHashParams, getURLParameter, position, setupTooltip;

  MIN_BYTES = 100000;

  formatSizeUnits = function(bytes) {
    if ((bytes >> 30) & 0x3FF) {
      bytes = (bytes >>> 30) + "." + (bytes & (3 * 0x3FF)) + "GB";
    } else if ((bytes >> 20) & 0x3FF) {
      bytes = (bytes >>> 20) + "." + (bytes & (2 * 0x3FF)) + "MB";
    } else if ((bytes >> 10) & 0x3FF) {
      bytes = (bytes >>> 10) + "." + (bytes & 0x3FF) + "KB";
    } else if ((bytes >> 1) & 0x3FF) {
      bytes = (bytes >>> 1) + "Bytes";
    } else {
      bytes = bytes + "Byte";
    }
    return bytes;
  };

  getCSRF = function() {
    var i, possible, text;
    text = "";
    possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    i = 0;
    while (i < 15) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
      i++;
    }
    return text;
  };

  getURLParameter = function(name) {
    return decodeURI((RegExp(name + "=" + "(.+?)(&|$)").exec(location.search) || [null])[1]);
  };

  getHashParams = function() {
    var a, d, e, hashParams, q, r;
    hashParams = {};
    e = void 0;
    a = /\+/g;
    r = /([^&;=]+)=?([^&;]*)/g;
    d = function(s) {
      return decodeURIComponent(s.replace(a, " "));
    };
    q = window.location.hash.substring(1);
    while (e = r.exec(q)) {
      hashParams[d(e[1])] = d(e[2]);
    }
    return hashParams;
  };

  extractName = function(name) {
    return name.slice(name.lastIndexOf("/") + 1, name.length);
  };

  setupTooltip = function() {
    return $(document).tooltip({
      show: {
        effect: "appear",
        duration: 0
      },
      hide: {
        effect: "appear",
        duration: 0
      },
      position: {
        my: "center top",
        at: "center bottom+20px"
      },
      items: ".node",
      content: function() {
        return "<b>Name: </b>" + this.__data__.name + "<br><b>Size: </b>" + formatSizeUnits(this.__data__.size);
      }
    });
  };

  position = function() {
    return this.style("left", function(d) {
      return d.x + "px";
    }).style("top", function(d) {
      return d.y + "px";
    }).style("width", function(d) {
      return Math.max(0, d.dx - 1) + "px";
    }).style("height", function(d) {
      return Math.max(0, d.dy - 1) + "px";
    });
  };

  div = void 0;

  createDivs = function() {
    var height, margin, width;
    width = window.innerWidth;
    height = window.innerHeight;
    margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    return div = d3.select("body").append("div").style("position", "relative").style("width", (width + margin.left + margin.right) + "px").style("height", (height + margin.top + margin.bottom) + "px").style("left", margin.left + "px").style("top", margin.top + "px");
  };

  depth = 0;

  drawTreeMap = function(data) {
    var color, height, node, treemap, width;
    width = window.innerWidth;
    height = window.innerHeight;
    color = d3.scale.category20c();
    treemap = d3.layout.treemap().size([width, height]).sticky(true).value(function(d) {
      return d.size;
    });
    node = div.datum(data, function(d) {
      return d.name;
    }).selectAll(".node").data(treemap.nodes);
    node.enter().append("div").attr("class", "node").call(position).style("background-color", function(d) {
      if (d.children) {
        return color(d.name);
      } else {
        return null;
      }
    }).on("hover", function() {
      return $('#path').text(d3.select(this).datum().path);
    });
    node.exit().remove();
    return node.transition().duration(1500).call(position);
  };

  getDataForUrl = function(dict, urlAddon) {
    return $.ajax({
      type: "GET",
      url: "https://api.dropbox.com/1/metadata/dropbox" + urlAddon,
      headers: {
        "Authorization": "Bearer " + access_token
      }
    }).fail(function(data) {
      var children, cleaned_path, file, folder, new_dict, _i, _len, _ref, _results;
      folder = JSON.parse(data["responseText"]);
      dict['name'] = extractName(folder.path);
      children = [];
      dict['children'] = children;
      _ref = folder.contents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.is_dir) {
          cleaned_path = encodeURI(file.path);
          new_dict = {};
          getDataForUrl(new_dict, cleaned_path);
          _results.push(children.push(new_dict));
        } else {
          if (file.bytes > MIN_BYTES) {
            _results.push(children.push({
              'name': extractName(file.path),
              'size': file.bytes
            }));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    });
  };

  getFreeSpace = function(dict) {
    return $.ajax({
      type: "GET",
      url: "https://api.dropbox.com/1/account/info",
      headers: {
        "Authorization": "Bearer " + access_token
      }
    }).fail(function(data) {
      data = JSON.parse(data["responseText"]);
      return dict['children'].push({
        "name": 'Free Space',
        "size": data["quota_info"]["quota"]
      });
    });
  };

  access_token = null;

  final = {};

  $(function() {
    var in_id, prev_final;
    $('form').hide();
    $('#loading').hide();
    access_token = getHashParams()['access_token'];
    if (!access_token) {
      return $('#authentication a').attr('href', $('#authentication a').attr('href') + "&state=" + getCSRF);
    } else {
      $("#loading").show();
      $('#page1').hide();
      $('#pad').hide();
      setupTooltip();
      createDivs();
      getDataForUrl(final, "/");
      prev_final = {};
      return in_id = setInterval((function() {
        if (JSON.stringify(prev_final) === JSON.stringify(final)) {
          $('#loading').hide();
          $('form').show();
          clearInterval(in_id);
          drawTreeMap(final);
        }
        return prev_final = jQuery.extend(true, {}, final);
      }), 1000);
    }
  });

}).call(this);
